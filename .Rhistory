geom_line(color = "blue") +  # Línea de la serie temporal
geom_vline(xintercept = as.numeric(fecha_quiebre), linetype = "dashed", color = "red") +  # Línea de la ruptura
labs(title = paste("Serie Temporal con Ruptura - ", variable),
subtitle = paste("Ruptura estructural en:", fecha_quiebre),
x = "Fecha", y = variable) +
theme_minimal()
return(p)
}
# Función para ejecutar el test de Zivot-Andrews y graficar la serie con la ruptura estructural
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test de Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Obtener el índice de la ruptura estructural
breakpoint_index <- which.min(za_test@cval)
# Obtener la fecha correspondiente a la ruptura estructural
fecha_quiebre <- df[[fecha_col]][breakpoint_index]
# Crear gráfico con ggplot2
p <- ggplot(df, aes(x = df[[fecha_col]], y = df[[variable]])) +
geom_line(color = "blue") +  # Línea de la serie temporal
geom_vline(xintercept = as.numeric(fecha_quiebre), linetype = "dashed", color = "red") +  # Línea de la ruptura
labs(title = paste("Serie Temporal con Ruptura - ", variable),
subtitle = paste("Ruptura estructural en:", fecha_quiebre),
x = "Fecha", y = variable) +
theme_minimal()
return(p)
}
# Ejemplo de dataframes con nombres y columnas relevantes
dataframes <- list(
precios_diesel = precios_diesel,
precios_gasolina = precios_gnv
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar la función y almacenar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Suponiendo que cada dataframe tiene una columna 'promedio' y 'fecha'
p <- grafico_ruptura(df, "promedio", "fecha_reg")
# Guardamos cada gráfico en la lista
graficos[[df_name]] <- p
}
# Combinar todos los gráficos en una sola imagen
grid.arrange(grobs = graficos, ncol = 2)  # Puedes ajustar el número de columnas (ncol)
# Definir la función para ejecutar el test Zivot-Andrews y graficar la ruptura estructural
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Obtener la posición del punto de ruptura desde el slot `breakpoint`
breakpoint_index <- za_test@breakpoint
# Obtener la fecha correspondiente al índice de ruptura
fecha_quiebre <- df[[fecha_col]][breakpoint_index]
# Crear el gráfico con ggplot2
p <- ggplot(df, aes(x = df[[fecha_col]], y = df[[variable]])) +
geom_line(color = "blue") +  # Línea de la serie temporal
geom_vline(xintercept = as.numeric(fecha_quiebre), linetype = "dashed", color = "red") +  # Línea de la ruptura
labs(title = paste("Serie Temporal con Ruptura - ", variable),
subtitle = paste("Ruptura estructural en:", fecha_quiebre),
x = "Fecha", y = variable) +
theme_minimal()
return(p)
}
# Lista de dataframes
dataframes <- list(
precios_diesel = precios_diesel,
precios_gnv = precios_gnv
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar la función y almacenar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
za_test <- ur.za(precios_diesel$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
# Definir la función para ejecutar el test Zivot-Andrews y graficar la ruptura estructural
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Obtener la posición del punto de ruptura desde el slot `breakpoint`
breakpoint_index <- za_test@bpoint
# Obtener la fecha correspondiente al índice de ruptura
fecha_quiebre <- df[[fecha_col]][breakpoint_index]
# Crear el gráfico con ggplot2
p <- ggplot(df, aes(x = df[[fecha_col]], y = df[[variable]])) +
geom_line(color = "blue") +  # Línea de la serie temporal
geom_vline(xintercept = as.numeric(fecha_quiebre), linetype = "dashed", color = "red") +  # Línea de la ruptura
labs(title = paste("Serie Temporal con Ruptura - ", variable),
subtitle = paste("Ruptura estructural en:", fecha_quiebre),
x = "Fecha", y = variable) +
theme_minimal()
return(p)
}
# Lista de dataframes
dataframes <- list(
precios_diesel = precios_diesel,
precios_gnv = precios_gnv
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar la función y almacenar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Combinar los gráficos en una sola imagen
grid.arrange(grobs = graficos, ncol = 2)  # Aj
# Función para aplicar el test Zivot-Andrews y graficar la ruptura estructural
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Obtener la posición del punto de ruptura desde el slot `bpoint`
breakpoint_index <- za_test@bpoint
# Obtener la fecha correspondiente al índice de ruptura
fecha_quiebre <- df[[fecha_col]][breakpoint_index]
# Crear el gráfico con plot (como en el ejemplo original)
p <- plot(za_test)
return(p)
}
# Lista de dataframes con las variables correspondientes
dataframes <- list(
precios_diesel = precios_diesel,
precios_gnv = precios_gnv
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Combinar los gráficos en una sola imagen (grid)
grid.arrange(grobs = graficos, ncol = 2)  # Ajusta 'ncol' segú
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Capturar el gráfico generado por plot(za_test)
p <- gridExtra::grid.grabExpr(plot(za_test))
return(p)
}
# Lista de dataframes con las variables correspondientes
dataframes <- list(
precios_diesel = precios_diesel,
precios_gnv = precios_gnv,
precios_gashol_84 = precios_gashol_84
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Capturar el gráfico generado por plot(za_test)
p <- gridExtra::grid.grabExpr(plot(za_test))
return(p)
}
# Lista de dataframes con las variables correspondientes
dataframes <- list(
precios_diesel = precios_diesel,
precios_gnv = precios_gnv,
precios_gashol_84 = precios_gashol_84
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
Lista de dataframes con las variables correspondientes
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Capturar el gráfico generado por plot(za_test)
p <- gridExtra::grid.grabExpr(plot(za_test))
return(p)
}
# Lista de dataframes con las variables correspondientes
dataframes <- list(
precios_diesel = promedio,
precios_gnv = promedio,
precios_gashol_84 = promedio
)
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Capturar el gráfico generado por plot(za_test)
p <- grid::grid.grabExpr(plot(za_test))
return(p)
}
# Lista de dataframes con las variables correspondientes
# Se asume que tienes dataframes como precios_diesel, precios_gnv, precios_gashol_84
dataframes <- list(
precios_diesel = precios_diesel,      # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gnv = precios_gnv,            # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gashol_84 = precios_gashol_84 # Dataframe con la columna 'promedio' y 'fecha_pre'
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Combinar los gráficos en una sola imagen (grid)
grid.arrange(grobs = graficos, ncol = 2)  # Ajusta 'ncol'
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Capturar el gráfico generado por plot(za_test)
p <- grid::grid.grabExpr(plot(za_test))
return(p)
}
# Lista de dataframes con las variables correspondientes
# Se asume que tienes dataframes como precios_diesel, precios_gnv, precios_gashol_84
dataframes <- list(
precios_diesel = precios_diesel,      # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gnv = precios_gnv,            # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gashol_84 = precios_gashol_84 # Dataframe con la columna 'promedio' y 'fecha_pre'
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Combinar los gráficos en una sola imagen (grid)
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Capturar el gráfico generado por plot(za_test)
p <- grid::grid.grabExpr(plot(za_test))
return(p)
}
# Lista de dataframes con las variables correspondientes
# Se asume que tienes dataframes como precios_diesel, precios_gnv, precios_gashol_84
dataframes <- list(
precios_diesel = precios_diesel,      # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gnv = precios_gnv,            # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gashol_84 = precios_gashol_84 # Dataframe con la columna 'promedio' y 'fecha_pre'
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Combinar los gráficos en una sola imagen (grid)
grid.arrange(grobs = graficos, ncol = 1)  # Ajusta 'ncol'
print(length(graficos))
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Capturar el gráfico generado por plot(za_test)
p <- grid::grid.grabExpr(plot(za_test))
return(p)
}
# Lista de dataframes con las variables correspondientes
# Se asume que tienes dataframes como precios_diesel, precios_gnv, precios_gashol_84
dataframes <- list(
precios_diesel = precios_diesel,      # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gnv = precios_gnv,            # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gashol_84 = precios_gashol_84 # Dataframe con la columna 'promedio' y 'fecha_pre'
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Combinar los gráficos en una sola imagen (grid)
grid.arrange(grobs = graficos, ncol = 1)  # Ajusta 'ncol'
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Capturar el gráfico generado por plot(za_test)
p <- grid::grid.grabExpr(plot(za_test))
return(p)
}
# Lista de dataframes con las variables correspondientes
# Se asume que tienes dataframes como precios_diesel, precios_gnv, precios_gashol_84
dataframes <- list(
precios_diesel = precios_diesel,      # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gnv = precios_gnv,            # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gashol_84 = precios_gashol_84 # Dataframe con la columna 'promedio' y 'fecha_pre'
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Combinar los gráficos en una sola imagen (grid)
grid.arrange(grobs = graficos, ncol = 2)  # Ajusta 'ncol'
za_test <- ur.za(precios_diesel$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
library(gridExtra)
library(grid)
# Función para aplicar el test Zivot-Andrews y capturar el gráfico
grafico_ruptura <- function(df, variable, fecha_col) {
# Realizar el test Zivot-Andrews
za_test <- ur.za(df[[variable]], model = "both", lag = 1)
# Guardar el gráfico en un archivo PNG
png(filename = paste0("grafico_", deparse(substitute(df)), ".png"))
plot(za_test)
dev.off()  # Cerrar el dispositivo gráfico
# Retornar el gráfico como grob (objeto gráfico)
grob <- grid::grid.grabExpr(plot(za_test))
return(grob)
}
# Lista de dataframes con las variables correspondientes
dataframes <- list(
precios_diesel = precios_diesel,      # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gnv = precios_gnv,            # Dataframe con la columna 'promedio' y 'fecha_pre'
precios_gashol_84 = precios_gashol_84 # Dataframe con la columna 'promedio' y 'fecha_pre'
)
# Lista para almacenar los gráficos
graficos <- list()
# Bucle para aplicar el test Zivot-Andrews y generar los gráficos
for(df_name in names(dataframes)) {
df <- dataframes[[df_name]]
# Aplicar la función y generar el gráfico
p <- grafico_ruptura(df, "promedio", "fecha_pre")
# Almacenar el gráfico en la lista
graficos[[df_name]] <- p
}
# Mostrar los gráficos en un grid (cuadrícula)
grid.arrange(grobs = graficos, ncol = 2)
za_test <- ur.za(precios_gnv$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
za_test <- ur.za(precios_diesel$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
ls()
za_test <- ur.za(precios_gnv$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
za_test <- ur.za(precios_gashol_84$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
za_test <- ur.za(precios_gashol_90$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
za_test <- ur.za(precios_gashol_95$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
za_test <- ur.za(precios_gashol_97$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
za_test <- ur.za(precios_gashol_98$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
za_test <- ur.za(precios_gashol_pre$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
za_test <- ur.za(precios_gashol_reg$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
quiebre_diesel <- test_quiebre(precios_diesel)
quiebre_diesel
za_test <- ur.za(precios_diesel$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
View(quiebre_diesel)
View(precios_gashol_reg)
View(precios_diesel)
quiebre_gnv <- test_quiebre(precios_gnv)
quiebre_gnv
# Gnv
za_test <- ur.za(precios_gnv$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
View(precios_diesel)
quiebre_gashol_84 <- test_quiebre(precios_gashol_84)
quiebre_gashol_84
za_test <- ur.za(precios_gashol_84$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
View(quiebre_gashol_84)
View(precios_gashol_84)
quiebre_gashol_90 <- test_quiebre(precios_gashol_90)
quiebre_gashol_90
za_test <- ur.za(precios_gashol_90$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
View(precios_gashol_90)
quiebre_gashol_95 <- test_quiebre(precios_gashol_95)
quiebre_gashol_95
za_test <- ur.za(precios_gashol_95$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
View(precios_gashol_95)
quiebre_gashol_95 <- test_quiebre(precios_gashol_95)
quiebre_gashol_97 <- test_quiebre(precios_gashol_97)
quiebre_gashol_95
quiebre_gashol_97
quiebre_gashol_97 <- test_quiebre(precios_gashol_97)
quiebre_gashol_97
za_test <- ur.za(precios_gashol_97$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
View(precios_gashol_97)
quiebre_gashol_98 <- test_quiebre(precios_gashol_98)
quiebre_gashol_98
za_test <- ur.za(precios_gashol_95$promedio, model = "both", lag = 1)
summary(za_test)
plot(za_test)
za_test@bpoint
View(precios_gashol_97)
setwd("C:/Users/Rihard/Documents/GitHub/Cluster_obesity")
# Cargar librerías
library(tidyverse)
library(cluster)
library(factoextra)
# Leer archivo
# Fuente: https://www.kaggle.com/datasets/aravindpcoder/obesity-or-cvd-risk-classifyregressorcluster?resource=download
data <- read.csv("ObesityDataSet.csv")
# Eliminar la variable objetivo (etiqueta)
data <- data %>% select(-NObeyesdad)
# Convertir variables categóricas a factores y luego a numéricas
data_clean <- data %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.numeric))
# Escalar datos
data_scaled <- scale(data_clean)
colSums(is.na(data_scaled))
fviz_nbclust(data_scaled, kmeans, method = "wss")
# Ejecutar K-means con 5 clustwers
set.seed(123)
km <- kmeans(data_scaled, centers = 5, nstart = 25)
# Visualizar clusters
fviz_cluster(km, data = data_scaled)
#clusplot(data_scaled, km$cluster, main='2D representation of the Cluster solution',
#         color=TRUE, shade=TRUE,
#         labels=5, lines=0)
# Añadir resultados al dataset original
data_clustered <- data %>% mutate(Cluster = factor(km$cluster))
# Ver primeros resultados
head(data_clustered)
# Calcular promedios por cluster (solo numéricas)
promedios <- data_clustered %>%
group_by(Cluster) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Mostrar tabla
print(promedios)
